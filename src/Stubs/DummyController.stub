<?php

/**
 * Created with Igloo Generator.
 * Date: DUMMYDATE
 */

namespace DummyNamespace;

use App\Responses\ApiResponse;
use App\Http\Controllers\Controller;
use App\Http\Requests\NamespaceFor\DummyCreateRequest;
use App\Http\Requests\NamespaceFor\DummyUpdateRequest;
use App\Services\DummyServiceWithNamespace;
use Exception;
use App\Transformers\NamespacedDummyTransformer;

class DummyController extends Controller
{

    /**
     * @var ApiResponse
     */
    private $apiResponse;

    /**
     * @var DummyService
     */
    private $dummyService;

    public function __construct(ApiResponse $apiResponse, DummyService $dummyService)
    {
        $this->apiResponse = $apiResponse;
        $this->dummyService = $dummyService;
    }

    /**
     * @return \Illuminate\Http\JsonResponse|mixed
     */
    public function index()
    {
        try {
                $dummys = $this->dummyService->allDummys();
                return $this->apiResponse->withPaginator($dummys, new DummyTransformer());
            } catch (Exception $e) {
                return $this->apiResponse->withError('Something Went Wrong.', 422);
            }
    }

    /**
     * @param DummyCreateRequest $request
     * @return mixed
     */
    public function create(DummyCreateRequest $request)
    {
       try {
            $dummy = $this->dummyService->createDummy($request);
            return $this->apiResponse->withItem($dummy, new DummyTransformer());
        } catch (Exception $e) {
            return $this->apiResponse->withError('Something Went Wrong.', 422);
        }
    }


    /**
     * @param $id
     * @return mixed
     */
    public function show($id)
    {
        try {
            $dummy = $this->dummyService->findDummy($id);
            return $this->apiResponse->withItem($dummy, new DummyTransformer());
        } catch (Exception $exception) {
            return $this->apiResponse->errorNotFound('Dummy Not Found');
        }
    }


    /**
     * @param $id
     * @param DummyUpdateRequest $request
     * @return mixed
     */
    public function update($id, DummyUpdateRequest $request)
    {
        try {
            $dummy = $this->dummyService->update($id, $request);
            return $this->apiResponse->withItem($dummy, new DummyTransformer());
        } catch (Exception $e) {
            return $this->apiResponse->errorNotFound('Dummy not found');
        }
    }

    /**
     * @param $id
     * @return \Illuminate\Http\JsonResponse|mixed
     */
    public function delete($id)
    {
        try {
            $dummy = $this->dummyService->deleteDummy($id);
            if ($dummy) {
                return $this->apiResponse->message('Dummy deleted Successfully');
            }
            return $this->apiResponse->errorNotFound('Dummy Not Found');
        } catch (Exception $e) {
            return $this->apiResponse->errorNotFound('Dummy Not Found');
        }
    }
}
